syntax = "proto3";

package scangroup;

import "prototypes/user.proto";
import "prototypes/filtertype.proto";

option go_package="github.com/linkai-io/am/protocservices/scangroup";

service ScanGroup {
    rpc Get(GroupRequest) returns (GroupResponse);
    rpc Create(NewGroupRequest) returns (GroupCreatedResponse);
    rpc Update(UpdateGroupRequest) returns (GroupUpdatedResponse);
    rpc Delete(DeleteGroupRequest) returns (GroupDeletedResponse);
    rpc AllGroups(AllGroupsRequest) returns (stream AllGroupsResponse);
    rpc Groups(GroupsRequest) returns (stream GroupResponse);
    rpc Pause(PauseGroupRequest) returns (GroupPausedResponse);
    rpc Resume(ResumeGroupRequest) returns (GroupResumedResponse);
    rpc GroupStats(GroupStatsRequest) returns (GroupStatsResponse);
    rpc UpdateStats(UpdateStatsRequest) returns (StatsUpdatedResponse);
    
}

message NSModuleConfig {
    int32 RequestsPerSecond = 1;
}

message BruteModuleConfig {
    int32 RequestsPerSecond = 1;
    repeated string CustomSubNames = 2;
    int32 MaxDepth = 3;
}

message PortModuleConfig {
    int32 RequestsPerSecond = 1;
    repeated int32 CustomPorts = 2;
}

message WebModuleConfig {
    int32 RequestsPerSecond = 1;
    bool TakeScreenShots = 2;
    int32 MaxLinks = 3;
    bool ExtractJS = 4;
    bool FingerprintFrameworks = 5;
}

message KeywordModuleConfig {
    repeated string Keywords = 1;
}

message ModuleConfiguration {
    NSModuleConfig NSConfig = 1;
    BruteModuleConfig BruteConfig = 2;
    PortModuleConfig PortConfig = 3;
    WebModuleConfig WebModuleConfig = 4;
    KeywordModuleConfig KeywordModuleConfig = 5;
    repeated int64 DailyScanSchedules = 6;
}

message Group {
    int32 OrgID = 1;
    int32 GroupID = 2;
    string GroupName = 3;
    int64 CreationTime = 4;
    string CreatedBy = 5;
    string OriginalInputS3URL = 6;
    int64 ModifiedTime = 7;
    string ModifiedBy = 8;
    ModuleConfiguration ModuleConfiguration = 9;
    bool Paused = 10;
    bool Deleted = 11;
    int32 CreatedByID = 12;
    int32 ModifiedByID = 13;
    int64 LastPausedTime = 14;
    int32 ArchiveAfterDays = 15;
}

message ScanGroupFilter {
    int64 Start = 1;
    int32 Limit = 2;
    FilterType Filters = 3;
}

message GroupStats {
    int32 OrgID = 1;
    int32 GroupID = 2;
    int32 ActiveAddresses = 3;
    int32 BatchSize = 4;
    int64 LastUpdated = 5;
    int64 BatchStart = 6;
    int64 BatchEnd = 7;
}

message NewGroupRequest {
    UserContext UserContext = 1;
    Group Group = 2;
}

message GroupCreatedResponse {
    int32 OrgID = 1;
    int32 GroupID = 2;
}

message UpdateGroupRequest {
    UserContext UserContext = 1;
    Group Group = 2;
}

message GroupUpdatedResponse {
    int32 OrgID = 1;
    int32 GroupID = 2;
}

message DeleteGroupRequest {
    UserContext UserContext = 1;
    int32 GroupID = 2;
}

message GroupDeletedResponse {
    int32 OrgID = 1;
    int32 GroupID = 2;
}

message GroupRequest {
    enum RequestBy {
        GROUPNAME = 0;
        GROUPID = 1;
    }
    UserContext UserContext = 1;
    RequestBy By = 2;
    int32 GroupID = 3;
    string GroupName = 4;
}

message AllGroupsRequest {
    UserContext UserContext = 1;
    ScanGroupFilter Filter = 2;
}

message AllGroupsResponse {
    Group Group = 1;
}

message GroupsRequest {
    UserContext UserContext = 1;
}

message GroupResponse {
    int32 OrgID = 1;
    Group Group = 2;
}

message PauseGroupRequest {
    UserContext UserContext = 1;
    int32 GroupID = 2;
}

message GroupPausedResponse {
    int32 OrgID = 1;
    int32 GroupID = 2;
}

message ResumeGroupRequest {
    UserContext UserContext = 1;
    int32 GroupID = 2;
}

message GroupResumedResponse {
    int32 OrgID = 1;
    int32 GroupID = 2;
}

message GroupStatsRequest {
    UserContext UserContext = 1;
}

message GroupStatsResponse {
    int32 OrgID = 1;
    map<int32, GroupStats> Stats = 2;
}

message UpdateStatsRequest {
    UserContext UserContext = 1;
    GroupStats Stats = 2;
}

message StatsUpdatedResponse {
    int32 OrgID = 1;
}