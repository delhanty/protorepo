syntax = "proto3";

package address;

import "prototypes/user.proto";
import "prototypes/address.proto";

option go_package="github.com/linkai-io/am/protocservices/address";

service Address {
    rpc Get(AddressesRequest) returns (stream AddressesResponse);
    rpc GetHostList(HostListRequest) returns (stream HostListResponse);
    rpc OrgStats(OrgStatsRequest) returns (OrgStatsResponse);
    rpc GroupStats(GroupStatsRequest) returns (GroupStatsResponse);
    rpc Update(UpdateAddressRequest) returns (UpdateAddressesResponse);
    rpc Delete(DeleteAddressesRequest) returns (DeleteAddressesResponse);
    rpc Ignore(IgnoreAddressesRequest) returns (IgnoreAddressesResponse);
    rpc Count(CountAddressesRequest) returns (CountAddressesResponse);
}

message AddressesRequest {
    UserContext UserContext = 1;
    AddressFilter Filter = 2;
}

message AddressesResponse {
    int32 OrgID = 1;
    AddressData Addresses = 2;
}

message HostListRequest {
    UserContext UserContext = 1;
    AddressFilter Filter = 2;
}

message HostListResponse {
    int32 OrgID = 1;
    HostListData HostList = 2;
}

message OrgStatsRequest {
    UserContext UserContext = 1;
}

message OrgStatsResponse {
    int32 OrgID = 1;
    repeated ScanGroupAddressStats GroupStats = 2;
}

message GroupStatsRequest {
    UserContext UserContext = 1;
    int32 GroupID = 2;
}

message GroupStatsResponse {
    int32 OrgID = 1;
    ScanGroupAddressStats GroupStats = 2;
}

message CountAddressesRequest {
    UserContext UserContext = 1;
    int32 GroupID = 2;
}

message CountAddressesResponse {
    int32 OrgID = 1;
    int32 GroupID = 2;
    int32 Count = 3;
}

message UpdateAddressRequest {
    UserContext UserContext = 1;
    map <string, AddressData> Address = 2;
}

message UpdateAddressesResponse {
    int32 OrgID = 1;
    int32 Count = 2;
}

message DeleteAddressesRequest {
    UserContext UserContext = 1;
    int32 GroupID = 2;
    repeated int64 AddressIDs = 3;
}

message DeleteAddressesResponse {
    int32 OrgID = 1;
}

message IgnoreAddressesRequest {
    UserContext UserContext = 1;
    int32 GroupID = 2;
    repeated int64 AddressIDs = 3;
    bool IgnoreValue = 4;
}

message IgnoreAddressesResponse {
    int32 OrgID = 1;
}